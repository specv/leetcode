# Longest Substring Without Repeating Characters

## S1

```elixir
defmodule Solution do
  @spec length_of_longest_substring(s :: String.t()) :: integer
  def length_of_longest_substring(s) do
    for i <- 0..(byte_size(s) - 1), j <- 0..(byte_size(s) - 1), i <= j do
      String.slice(s, i..j)
    end
    |> Enum.sort_by(&byte_size/1, :desc)
    |> Enum.find(fn s ->
      byte_size(s) == s |> String.to_charlist() |> Enum.uniq() |> length
    end)
    |> byte_size
  end
end
```

```elixir
ExUnit.start(autorun: false)

defmodule Test do
  use ExUnit.Case

  test nil do
    assert Solution.length_of_longest_substring("abcabcbb") == 3
    assert Solution.length_of_longest_substring("bbbbb") == 1
    assert Solution.length_of_longest_substring("pwwkew") == 3

    assert Solution.length_of_longest_substring(
             "wgvgblarjtolsgzdebatyzdksjncyocwwzczkctvyhgqqgwujynhxttpcgscuuyswdsgf"
           ) > 0
  end
end

ExUnit.run()
```
